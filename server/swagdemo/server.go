package main

import (
	"flag"
	"fmt"
	"log"
	"net/http"
	"time"

	httpSwagger "github.com/swaggo/http-swagger"

	//"github.com/go-chi/chi"

	_ "swagdemo/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gorilla/mux"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
	// 从环境变量获取参数: fileserver -p 8080
	portAddress := flag.Int("p", 8080, "specify the port of your file server")
	flag.Parse()
	port := *portAddress
	// 提示监听端口。可指定端口，默认：8000
	fmt.Printf("Serving HTTP on http://0.0.0.0:%d", port)

	hmux := http.NewServeMux()
	hmux.Handle("/hget", get())
	hmux.HandleFunc("/get", get())
	hmux.HandleFunc("/put", get())
	//http.Handle("/swagger", httpSwagger.WrapHandler)
	//r := chi.NewRouter()
	//r.Get("/swagger/*", httpSwagger.WrapHandler)

	r := mux.NewRouter()
	r.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler)
	r.PathPrefix("/").Handler(hmux)
	// 启动监听 HTTP 服务
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", port), r))
}

func get() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		body := "Hello Golang!"
		err1 := longTimeOperation()
		fmt.Println(err1)
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(body))
	}
}

func longTimeOperation() error {
	time.Sleep(time.Second * 20)
	return nil
}
